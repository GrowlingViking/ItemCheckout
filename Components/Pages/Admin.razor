@page "/admin"
@using ItemCheckout.Data.Entities
@using ItemCheckout.Services
@rendermode InteractiveServer
@inject NavigationManager Navigation;
@inject IItemCheckoutService ItemCheckoutService;

<div class="d-flex flex-column">
    <PageTitle>Admin</PageTitle>

    <div class="flex-grow-1 overflow-auto py-3">
        @foreach (var type in Enum.GetValues<NamedItemType>())
        {
            <h4>@type</h4>
            @if (!namedItems.Any(x => x.ItemType == type))
            {
                <p>
                    <em>No items with type @type</em>
                </p>
            }
            else
            {
                <ul class="list-group pb-3">
                    @foreach (var namedItem in namedItems.Where(x => x.ItemType == type))
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span><b>@namedItem.Name</b></span>
                            <div class="btn-group" role="group" aria-label="Item actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="@(() => NavigateToEdit(namedItem.Id))">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteItem(namedItem.Id))">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            } 
        }
    </div>

    <div class="bg-light border-top py-3">
        <h4>Create new Named Item</h4>
        <EditForm Model="@newItem" OnValidSubmit="@HandleSubmitNewNamedItem" FormName="CreateNamedItem" Enhance>
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="mb-3">
                <label for="name">Item Name:</label>
                <InputText @bind-Value="newItem.Name" class="form-control" id="name"/>
            </div>

            <div class="mb-3">
                <label for="type">Item Type:</label>
                <InputSelect @bind-Value="newItem.ItemType" TValue="@NamedItemType" class="form-control" id="type">
                    @foreach (var type in Enum.GetValues<NamedItemType>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Add Named Item</button>
        </EditForm>

        @if (SuccessMessage != null)
        {
            <div class="alert alert-success mt-3">@SuccessMessage</div>
        }
        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger mt-3">@ErrorMessage</div>
        }
    </div>
</div>

@code {
    private List<NamedItem> namedItems = [];
    private List<Item> items = [];
    private NamedItem newItem = new();

    private string? SuccessMessage;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        namedItems = await ItemCheckoutService.GetNamedItemsAsync();
        items = await ItemCheckoutService.GetItemsAsync();
        newItem = new NamedItem
        {
            Name = "",
            ItemType = NamedItemType.Headlamp,
        };
        await base.OnInitializedAsync();
    }

    private async Task HandleSubmitNewNamedItem()
    {
        try
        {
            var entity = new NamedItem
            {
                Name = newItem.Name,
                ItemType = newItem.ItemType
            };

            await ItemCheckoutService.CreateNamedItem(entity);

            SuccessMessage = "Named Item added successfully!";
            ErrorMessage = null;

            newItem = new NamedItem
            {
                Name = "",
                ItemType = NamedItemType.Headlamp,
            };

            namedItems = await ItemCheckoutService.GetNamedItemsAsync();
        }
        catch (Exception e)
        {
            SuccessMessage = null;
            ErrorMessage = $"Something went wrong: {e.Message}";
        }
    }

    private void NavigateToEdit(int namedItemId)
    {
        Navigation.NavigateTo($"/admin/named-item/{namedItemId}");
    }

    private async Task DeleteItem(int namedItemId)
    {
        await ItemCheckoutService.DeleteNamedItem(namedItemId);
        namedItems = await ItemCheckoutService.GetNamedItemsAsync();
    }
}
@page "/Admin"
@using ItemCheckout.Data.Entities
@using ItemCheckout.Services
@rendermode InteractiveServer
@inject IItemCheckoutService ItemCheckoutService;

<h3>Admin</h3>

<h4>Create new Named Item</h4>
<EditForm Model="@newItem" OnValidSubmit="@HandleValidSubmit" FormName="CreateNamedItem" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="name">Item Name:</label>
        <InputText @bind-Value="newItem.Name" class="form-control" id="name" />
    </div>
    
    <div class="mb-3">
        <label for="type">Item Type:</label>
        <InputSelect @bind-Value="newItem.ItemType" TValue="@NamedItemType" class="form-control" id="type" >
            @foreach (var type in Enum.GetValues<NamedItemType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>
    
    <button type="submit" class="btn btn-primary">Add Named Item</button>
</EditForm>

@if (SuccessMessage != null)
{
    <div class="alert alert-success mt-3">@SuccessMessage</div>
}
@if (ErrorMessage != null)
{
    <div class="alert alert-danger mt-3">@ErrorMessage</div>
}

@code {
    private List<NamedItem> namedItems = [];
    private List<Item> items = [];
    private NamedItem newItem = new();

    private string? SuccessMessage;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        namedItems = await ItemCheckoutService.GetNamedItemsAsync();
        items = await ItemCheckoutService.GetItemsAsync();
        newItem = new NamedItem
        {
            Name = "",
            ItemType = NamedItemType.Headlamp,
        };
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var entity = new NamedItem
            {
                Name = newItem.Name,
                ItemType = newItem.ItemType
            };

            await ItemCheckoutService.CreateNamedItem(entity);

            SuccessMessage = "Named Item added successfully!";
            ErrorMessage = null;
            newItem = new NamedItem();
        }
        catch (Exception e)
        {
            SuccessMessage = null;
            ErrorMessage = $"Something went wrong: {e.Message}";
        }
    }
}
@page "/admin/named-item/{ItemId:int}"
@using ItemCheckout.Data.Entities
@using ItemCheckout.Services
@rendermode InteractiveServer
@inject NavigationManager Navigation;
@inject IItemCheckoutService ItemCheckoutService;

<h3>Edit Named Item</h3>

<EditForm Model="@namedItem" OnValidSubmit="@HandleValidSubmit" FormName="EditNamedItem" Enhance>
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="name">Item Name:</label>
        <InputText @bind-Value="namedItem.Name" class="form-control" id="name"/>
    </div>

    <div class="mb-3">
        <label for="type">Item Type:</label>
        <InputSelect @bind-Value="namedItem.ItemType" TValue="@NamedItemType" class="form-control" id="type">
            @foreach (var type in Enum.GetValues<NamedItemType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>
    
    <div class="mb-3">
        <label for="status">Item Status</label>
        <InputSelect @bind-Value="namedItem.Status" TValue="@NamedItemStatus" class="form-control" id="status">
            @foreach (var status in Enum.GetValues<NamedItemStatus>())
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">Update Named Item</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </div>
</EditForm>

@if (SuccessMessage != null)
{
<div class="alert alert-success mt-3">@SuccessMessage</div>
}
@if (ErrorMessage != null)
{
<div class="alert alert-danger mt-3">@ErrorMessage</div>
}

@code {
    [Parameter]
    public int ItemId { get; set; }

    private NamedItem? namedItem = new();

    private string? SuccessMessage; 
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        namedItem = await ItemCheckoutService.GetNamedItemAsync(ItemId);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            namedItem = await ItemCheckoutService.UpdateNamedItem(namedItem);
            SuccessMessage = "Named Item updated successfully!";
        }
        catch (Exception e)
        {
            SuccessMessage = null;
            ErrorMessage = e.Message;
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/admin");
    }
}